export const codingExamples = {
  python: [
    "def func(x):",
    "if x > 0:",
    "for i in range(5):",
    "return x * 2",
    "print('Hello, World!')",
    "list comprehension: [x**2 for x in range(10)]",
    "lambda function: lambda x: x + 1",
    "with open('file.txt', 'r') as file:",
    "class MyClass:",
    "def __init__(self, value):",
    "try: something() except Exception as e:",
    "import os",
    "dict.update({key: value})",
    "while True: break",
    "set([1, 2, 3])",
    "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
    "global variable = 10",
    "enumerate(sequence)",
    "yield x",
    "assert x > 0"
  ],

  javascript: [
    "const x = 10;",
    "if (x > 0) {}",
    "for (let i = 0; i < 5; i++) {}",
    "function greet(name) { return `Hello, ${name}!`; }",
    "console.log('Hello, World!');",
    "array method: numbers.map(x => x * 2)",
    "arrow function: const add = (a, b) => a + b;",
    "async function fetchData() { const response = await fetch(url); }",
    "let y = { a: 1 };",
    "try { code() } catch (e) { console.error(e); }",
    "class Person { constructor(name) { this.name = name; } }",
    "setTimeout(() => console.log('Delayed'), 1000);",
    "Promise.resolve().then(() => console.log('Resolved'));",
    "const [a, b] = [1, 2];",
    "Object.keys(obj).forEach(key => console.log(key));",
    "event.preventDefault();",
    "document.querySelector('div');",
    "localStorage.setItem('key', 'value');",
    "fetch('api/data').then(res => res.json());",
    "const regex = /pattern/g;"
  ],

  java: [
    "public void run() {}",
    "if (x > 0) {}",
    "for (int i = 0; i < 10; i++) {}",
    "System.out.println(\"Hello, World!\");",
    "List<Integer> numbers = Arrays.asList(1, 2, 3);",
    "stream API: numbers.stream().filter(x -> x > 0).map(x -> x * 2);",
    "lambda expression: (a, b) -> a + b",
    "try-with-resources: try (BufferedReader br = new BufferedReader(new FileReader(\"file.txt\"))) {}",
    "public class MyClass {}",
    "static void main(String[] args) {}",
    "int[] array = new int[5];",
    "HashMap<String, Integer> map = new HashMap<>();",
    "throw new Exception(\"Error\");",
    "switch (x) { case 1: break; }",
    "interface MyInterface { void method(); }",
    "public static final int CONSTANT = 10;",
    "Collections.sort(list);",
    "Thread t = new Thread(() -> System.out.println(\"Thread\"));",
    "Optional.ofNullable(value).orElse(defaultValue);",
    "synchronized (this) { code(); }"
  ],

  csharp: [
    "void Run() {}",
    "if (x > 0) {}",
    "for (int i = 0; i < 10; i++) {}",
    "Console.WriteLine(\"Hello, World!\");",
    "LINQ query: numbers.Where(x => x > 0).Select(x => x * 2);",
    "lambda expression: (a, b) => a + b",
    "async Task FetchData() { var response = await httpClient.GetAsync(url); }",
    "using statement: using (var reader = new StreamReader(\"file.txt\")) {}",
    "public class MyClass {}",
    "int[] array = new int[5];",
    "Dictionary<string, int> dict = new Dictionary<string, int>();",
    "try { code(); } catch (Exception e) { Console.WriteLine(e); }",
    "var result = from n in numbers where n > 0 select n * 2;",
    "lock (this) { code(); }",
    "public event EventHandler MyEvent;",
    "Task.Run(() => Console.WriteLine(\"Async\"));",
    "List<T> list = new List<T>();",
    "enum Color { Red, Green, Blue }",
    "string.Join(\",\", array);",
    "DateTime.Now.ToString();"
  ],

  cpp: [
    "int func(int x) { return x * 2; }",
    "if (x > 0) {}",
    "for (int i = 0; i < 10; i++) {}",
    "std::cout << \"Hello, World!\" << std::endl;",
    "vector<int> numbers = {1, 2, 3};",
    "STL algorithm: std::transform(numbers.begin(), numbers.end(), [](int x) { return x * 2; });",
    "lambda expression: [](int a, int b) { return a + b; }",
    "smart pointer: std::unique_ptr<int> ptr = std::make_unique<int>(10);",
    "class MyClass { public: int x; };",
    "int array[5] = {0};",
    "std::map<std::string, int> map;",
    "try { code(); } catch (const std::exception& e) { std::cerr << e.what(); }",
    "namespace MyNamespace { int x = 10; }",
    "template <typename T> void func(T t) {}",
    "std::thread t([]{ std::cout << \"Thread\"; });",
    "auto result = std::find(numbers.begin(), numbers.end(), 5);",
    "struct Point { int x, y; };",
    "std::mutex mtx;",
    "std::condition_variable cv;",
    "virtual void method() = 0;"
  ],

  php: [
    "$x = 10;",
    "if ($x > 0) {}",
    "foreach ($numbers as $number) {}",
    "echo 'Hello, World!';",
    "array_map(function($x) { return $x * 2; }, $numbers);",
    "closure: $add = function($a, $b) { return $a + $b; };",
    "try-catch block: try {} catch (Exception $e) {}",
    "include 'file.php';",
    "class MyClass { public $prop; }",
    "$array = [1, 2, 3];",
    "function myFunction() { return true; }",
    "require_once 'config.php';",
    "isset($variable);",
    "array_filter($numbers, fn($x) => $x > 0);",
    "session_start();",
    "$db = new PDO('mysql:host=localhost', 'user', 'pass');",
    "header('Location: index.php');",
    "preg_match('/pattern/', $string);",
    "json_encode($data);",
    "file_get_contents('file.txt');"
  ],

  typescript: [
    "const x: number = 10;",
    "if (x > 0) {}",
    "for (let i = 0; i < 5; i++) {}",
    "function greet(name: string): string { return `Hello, ${name}!`; }",
    "console.log('Hello, World!');",
    "array method: numbers.filter(x => x > 0).map(x => x * 2);",
    "type alias: type Point = { x: number, y: number };",
    "async function fetchData(): Promise<void> { const response = await fetch(url); }",
    "interface User { id: number; name: string; }",
    "let y: string[] = ['a', 'b'];",
    "enum Color { Red = 0, Green = 1 }",
    "class MyClass { private x: number; }",
    "type Result<T> = { data: T };",
    "const obj: { [key: string]: any } = {};",
    "fetchData().then(data => console.log(data));",
    "useEffect(() => { console.log('Mounted'); }, []);",
    "const [state, setState] = useState(0);",
    "Promise.all([promise1, promise2]);",
    "keyof typeof obj;",
    "void function() {};"
  ],

  swift: [
    "func greet(_ name: String) -> String { return \"Hello, \(name)!\" }",
    "if x > 0 {}",
    "for i in 0..<5 {}",
    "print(\"Hello, World!\")",
    "array transformation: numbers.filter { $0 > 0 }.map { $0 * 2 }",
    "closure: let add = { (a: Int, b: Int) -> Int in return a + b }",
    "guard statement: guard let name = optionalName else { return }",
    "defer block: defer { print(\"This runs at the end\") }",
    "class MyClass { var x: Int }",
    "let array = [1, 2, 3]",
    "switch x { case 1: break }",
    "func handleError() throws {}",
    "let dict: [String: Int] = [:]",
    "do { try action() } catch {}",
    "protocol MyProtocol { func method() }",
    "var optional: Int? = nil",
    "for case let x in sequence {}",
    "self.x = value",
    "if let unwrapped = optional {}",
    "Task { await asyncFunction() }"
  ],

  go: [
    "func add(a, b int) int { return a + b }",
    "if x > 0 {}",
    "for i := 0; i < 5; i++ {}",
    "fmt.Println(\"Hello, World!\")",
    "slice operation: numbers = append(numbers, 10)",
    "goroutine: go func() { fmt.Println(\"Concurrent\") }()",
    "channel: ch := make(chan int)",
    "defer statement: defer fmt.Println(\"Deferred\")",
    "type MyStruct struct { x int }",
    "var slice []int",
    "switch x := x.(type) {}",
    "func (r Receiver) method() {}",
    "import \"fmt\"",
    "const constant = 10",
    "range over slice: for i, v := range slice {}",
    "select { case <-ch: }",
    "func main() {}",
    "mutex.Lock(); defer mutex.Unlock()",
    "interface { method() }",
    "time.Sleep(100 * time.Millisecond)"
  ],

  kotlin: [
    "fun greet(name: String): String { return \"Hello, $name!\" }",
    "if (x > 0) {}",
    "for (i in 0..4) {}",
    "println(\"Hello, World!\")",
    "list transformation: numbers.filter { it > 0 }.map { it * 2 }",
    "lambda expression: val add = { a: Int, b: Int -> a + b }",
    "null safety: val name: String? = null",
    "when expression: when (x) { 1 -> println(\"One\") }",
    "class MyClass(val x: Int)",
    "val list = listOf(1, 2, 3)",
    "try { code() } catch (e: Exception) {}",
    "data class User(val id: Int)",
    "sealed class Result",
    "let { it * 2 }",
    "with(obj) { this.property }",
    "lazy val value by lazy { compute() }",
    "suspend fun async() {}",
    "run { println(\"Block\") }",
    "apply { this.x = 10 }",
    "coroutineScope { launch { } }"
  ],

  mixed: [
    "if (x > 0) {}",
    "for (let i = 0; i < 5; i++) {}",
    "function add(a, b) { return a + b; }",
    "array.map(x => x * 2);",
    "try { riskyCode(); } catch (e) {}",
    "const obj = { key: 'value' };",
    "console.log('Hello');",
    "async function fetch() { await apiCall(); }",
    "class MyClass { constructor() {} }",
    "throw new Error('Oops');",
    "public void method() {}",
    "std::cout << \"Text\";",
    "func goFunc() {}",
    "$phpVar = 10;",
    "val kotlinVal = 5",
    "print(\"Swift\")",
    "List.of(1, 2, 3);",
    "var goSlice = []int{1}",
    "type MyType = string",
    "defer { cleanup() }"
  ]
};